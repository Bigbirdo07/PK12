Describe its core features, including any user-facing components or back-end processes.  o Highlight the practical impact or innovation—why this project is worth pursuing.  4. Resources to This project will be critically important, as it centers on automating the scheduling process for a range of approximately 800 to 2,000 students, depending on their grade level and academic proficiency. The primary objective is to design a Python-integrated solution that leverages publicly available data from local public schools. Many of these schools publish their curricula, required courses, and elective offerings online, which can be programmatically accessed and organized.
The core idea is to build a scheduling model tailored for each individual school — incorporating student calendars, class rotations, course structures, and estimated enrollment figures across elementary, middle, and high schools. For example, the system should be able to take a given high school curriculum such as classes available for example , ("Classical High School 12th Grade Courses Available)and schedule 150 students accordingly across available offerings."
From a technical perspective, the project will integrate tools such as NumPy, Pandas, and potentially custom machine learning models to match students to schedules based on constraints and availability. While GitHub repositories specifically addressing this problem are limited, my background in bioinformatics and data modeling equips me with the skills to adapt existing data science tools for this educational context.
In terms of architectural design, I plan to implement a Retrieval-Augmented Generation (RAG) pipeline to web scrape course offerings from school websites. GPT (or an LLM) will sit at the frontend, enabling user queries such as "Show me all 9th-grade STEM electives available at XYZ High School," while backend Python scripts handle parsing, structuring, and integrating the scraped curriculum data.
This project will draw on prior experience from Labs 1, 2, 3, and 5 — especially regarding task decomposition, code organization, prompt engineering, and API integration.
